import sys
from typing import List, Optional
import rclpy
import rclpy.node
import rclpy.parameter

import imperial_driverless_interfaces.msg as idi
from rcl_interfaces.msg import SetParametersResult
from id_track_utils.track import Track  # has to be apt-installed to be detected
from pathlib import Path

import rclpy.exceptions


class GTConeMapPublisher(rclpy.node.Node):
    """
    A node that reads a Track from the supplied file, and publishes it as a ConeMap message to `/ground_truth/cone_map`, in the `gt_map` frame.

    Parameters:
    `track_file` (string): Path to the track file to be read.
    `frequency` (double): The frequency at which to publish the ConeMap message. Defaults to 1.0.
    """

    def __init__(self):
        super().__init__("gt_cone_map_publisher")
        self.ground_truth_map_frame = "gt_map"
        self.msg: Optional[idi.ConeMap] = None
        self.add_on_set_parameters_callback(self.cb_params)
        try:
            self.declare_parameter("track_file", rclpy.parameter.Parameter.Type.STRING)
        except TypeError as e:
            if "expected str, bytes or os.PathLike object, not NoneType" in str(e):
                raise rclpy.exceptions.ParameterException(
                    "Mandatory parameter was not supplied", parameters="track_file"
                ) from None
        publishing_frequency = self.declare_parameter("frequency", 1.0).value
        self.timer = self.create_timer(
            publishing_frequency, self.publish_gt_cone_map_if_available
        )
        self.publisher = self.create_publisher(idi.ConeMap, "ground_truth/cone_map", 1)

    def publish_gt_cone_map_if_available(self):
        if self.msg is not None:
            self.publisher.publish(self.msg)

    def cb_params(self, parameter_list: List[rclpy.parameter.Parameter]):
        for parameter in parameter_list:
            if parameter.name == "track_file":
                track_file = Path(parameter.value)
                t = Track.load_from_file(track_file)
                t.frame_id = self.ground_truth_map_frame
                self.msg = t.as_conemap_message()

                return SetParametersResult(successful=True)
        return SetParametersResult(successful=True)


def main(args: List[str] = sys.argv[1:]):
    rclpy.init(args=args)

    node = GTConeMapPublisher()

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    except RuntimeError as e: 
        if not "make_tuple(): unable to convert arguments to Python object" in str(e):
            raise e
    finally:
        node.destroy_node()
        rclpy.shutdown()
