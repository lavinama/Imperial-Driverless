import math
import sys
from typing import List
import rclpy
import rclpy.node
import rclpy.duration
import rclpy.time

import nav_msgs.msg

import random


class OdometryNoisifier(rclpy.node.Node):
    def __init__(self):
        super().__init__("odometry_noisifier")

        self.drift_magnitude = self.declare_parameter("drift_magnitude", 0.1).value

        drift_direction = random.random() * 2 * math.pi

        self.drift_x = self.drift_magnitude * math.cos(drift_direction)
        self.drift_y = self.drift_magnitude * math.sin(drift_direction)

        self.offset_x = 0.0
        self.offset_y = 0.0

        self.publisher = self.create_publisher(nav_msgs.msg.Odometry, "/odom", 1)

        self.clock_sub = self.create_subscription(
            nav_msgs.msg.Odometry, "/ground_truth/odom", self.publish_odom_path, 1
        )

        self.drift_application_period = 0.1
        self.drift_timer = self.create_timer(
            self.drift_application_period, self.drift_callback
        )

    def drift_callback(self):
        self.offset_x += self.drift_x * self.drift_application_period
        self.offset_y += self.drift_y * self.drift_application_period

    def publish_odom_path(self, msg: nav_msgs.msg.Odometry):
        msg.pose.pose.position.x += self.offset_x
        msg.pose.pose.position.y += self.offset_y
        self.publisher.publish(msg)


def main(args: List[str] = sys.argv[1:]):
    rclpy.init(args=args)

    node = OdometryNoisifier()

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    except RuntimeError as e: 
        if not "make_tuple(): unable to convert arguments to Python object" in str(e):
            raise e
    finally:
        node.destroy_node()
        rclpy.shutdown()
