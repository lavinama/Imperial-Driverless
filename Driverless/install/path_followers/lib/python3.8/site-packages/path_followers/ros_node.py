from typing import List, Tuple
import rclpy
import rclpy.time
import rclpy.node
import tf2_ros
import geometry_msgs.msg
import nav_msgs.msg

import transforms3d # type: ignore

from .path_follower_base import PathFollowerBase, Point2D

class PathFollowerROSNode(rclpy.node.Node):

    def __init__(self, name: str, path_follower: PathFollowerBase):
        super().__init__(name) # type: ignore

        path_topic = 'path'
        cmd_vel_topic = 'cmd_vel'
        timer_period_sec = 0.02 # 50 Hz

        self._tf_buffer = tf2_ros.Buffer()
        self._tf_listener = tf2_ros.TransformListener(self._tf_buffer, self)

        self._subscription = self.create_subscription( # type: ignore
            nav_msgs.msg.Path, 
            path_topic, 
            self.new_path_callback, 
            qos_profile=10
        )

        self._cmd_pub = self.create_publisher( # type: ignore
            geometry_msgs.msg.Twist, 
            cmd_vel_topic,
            qos_profile=10)

        self._timer = self.create_timer(timer_period_sec, self.publish_drive_commands) # type: ignore

        self._path_follower = path_follower

    def make_pose(self, point: Point2D):
        return geometry_msgs.msg.PoseStamped(
            pose=geometry_msgs.msg.Pose(
                position=geometry_msgs.msg.Point(x=point[0], y=point[1])
            )
        ) 

    def new_path_callback(self, path_msg: nav_msgs.msg.Path) -> None:
        path: List[Point2D] = [(p.pose.position.x, p.pose.position.y) for p in path_msg.poses] # type: ignore
        self._path_follower.update_path(path)

        

    def publish_drive_commands(self):
        ts: geometry_msgs.msg.TransformStamped = self._tf_buffer.lookup_transform('map', 'base_link', rclpy.time.Time(seconds=0)) # type: ignore
        translation: geometry_msgs.msg.Vector3 = ts.transform.translation # type: ignore
        rotation: geometry_msgs.msg.Quaternion = ts.transform.rotation # type: ignore

        car_position: Tuple[float, float] = (translation.x, translation.y) # type: ignore
        rotation: List[float] = [rotation.w, rotation.x, rotation.y, rotation.z] # type: ignore
        _, _, car_bearing = transforms3d.euler.quat2euler(rotation) # type: ignore

        linear, angular = self._path_follower.get_commands(car_position, car_bearing) # type: ignore

        msg = geometry_msgs.msg.Twist(
            linear=geometry_msgs.msg.Vector3(x=linear, y=0.0, z=0.0),
            angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=angular)
        )
        self._cmd_pub.publish(msg)

def expose_as_ros_node(path_follower_instance: PathFollowerBase, name: str):
    rclpy.init(args=None)
    try:
        rclpy.spin(PathFollowerROSNode(name, path_follower_instance))
    except KeyboardInterrupt:
        pass
    finally:
        rclpy.shutdown()
