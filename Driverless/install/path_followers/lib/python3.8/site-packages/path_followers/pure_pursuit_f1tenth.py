from typing import Sequence, Tuple
import numpy as np

# from numba import njit

from .path_follower_base import PathFollowerBase, LinearVelocity, AngularVelocity, Point2D
from .ros_node import expose_as_ros_node

# simple pure pursuit implementation
# adapted from https://github.com/f1tenth/f1tenth_gym/blob/main/examples/waypoint_follow.py

def main():
    expose_as_ros_node(PurePursuitFollower(speed=4.0, lookahead=3.0), 'pure_pursuit_f1tenth')


class PurePursuitFollower(PathFollowerBase):
    """
    Example Planner
    """
    def __init__(self, speed: float, lookahead: float):
        self.max_reacquire = 20.
        self.waypoints = np.empty(shape=(0,7))

        self.wpt_xind = 0
        self.wpt_yind = 1
        self.wpt_thind = 2
        self.wpt_vind = 3

        self.velocity = speed

        self.lookahead_distance = lookahead

    def update_path(self, path: Sequence[Point2D]):
        path = list(path)
        if not path:
            return

        wpts = []

        for (x1, y1), (x2, y2) in zip(path, path[1:] + [path[0]]):
            th = np.arctan2(y2-y1, x2-x1)

            wpt = [0.0] * (1 + max(self.wpt_xind, self.wpt_yind, self.wpt_thind, self.wpt_vind))
            wpt[self.wpt_xind] = x1
            wpt[self.wpt_yind] = y1
            wpt[self.wpt_thind] = th
            wpt[self.wpt_vind] = self.velocity

            wpts.append(wpt)

        self.waypoints = np.array(wpts, dtype=np.float64)

    def _get_current_waypoint(self, waypoints: np.ndarray, position: Point2D, theta: float):
        """
        gets the current waypoint to follow
        """
        wpts = np.vstack((self.waypoints[:, self.wpt_xind], self.waypoints[:, self.wpt_yind])).T
        nearest_point, nearest_dist, t, i = nearest_point_on_trajectory(position, wpts)
        if nearest_dist < self.lookahead_distance:
            lookahead_point, i2, t2 = first_point_on_trajectory_intersecting_circle(position, self.lookahead_distance, wpts, i+t, wrap=True)
            if i2 == None:
                return None
            current_waypoint = np.empty((3, ))
            # x, y
            current_waypoint[0:2] = wpts[i2, :]
            # speed
            current_waypoint[2] = waypoints[i, self.wpt_vind]
            return current_waypoint
        elif nearest_dist < self.max_reacquire:
            return np.append(wpts[i, :], waypoints[i, self.wpt_vind])
        else:
            return None

    def get_commands(self, car_position: Point2D, car_bearing: float) -> Tuple[LinearVelocity, AngularVelocity]:
        """
        gives actuation given observation
        """
        if self.waypoints.size == 0:
            return 0.0, 0.0

        lookahead_point = self._get_current_waypoint(self.waypoints, car_position, car_bearing)

        if lookahead_point is None:
            return 4.0, 0.0

        return get_velocity_command(car_bearing, lookahead_point, car_position, self.lookahead_distance)



"""
Planner Helpers
"""
# @njit(fastmath=False, cache=True)
def nearest_point_on_trajectory(point_tup: Point2D, trajectory: np.ndarray) -> Tuple[np.ndarray, float, float, int]:
    """
    Return the nearest point along the given piecewise linear trajectory.

    Same as nearest_point_on_line_segment, but vectorized. This method is quite fast, time constraints should
    not be an issue so long as trajectories are not insanely long.

        Order of magnitude: trajectory length: 1000 --> 0.0002 second computation (5000fps)

    point: size 2 numpy array
    trajectory: Nx2 matrix of (x,y) trajectory waypoints
        - these must be unique. If they are not unique, a divide by 0 error will destroy the world
    """
    point = np.array(point_tup)
    
    diffs = trajectory[1:,:] - trajectory[:-1,:]
    l2s   = diffs[:,0]**2 + diffs[:,1]**2
    # this is equivalent to the elementwise dot product
    # dots = np.sum((point - trajectory[:-1,:]) * diffs[:,:], axis=1)
    dots = np.empty((trajectory.shape[0]-1, ))
    for i in range(dots.shape[0]):
        dots[i] = np.dot((point - trajectory[i, :]), diffs[i, :])
    t = dots / l2s
    t[t<0.0] = 0.0
    t[t>1.0] = 1.0
    # t = np.clip(dots / l2s, 0.0, 1.0)
    projections = trajectory[:-1,:] + (t*diffs.T).T
    # dists = np.linalg.norm(point - projections, axis=1)
    dists = np.empty((projections.shape[0],))
    for i in range(dists.shape[0]):
        temp = point - projections[i]
        dists[i] = np.sqrt(np.sum(temp*temp))
    min_dist_segment = int(np.argmin(dists))
    return projections[min_dist_segment], dists[min_dist_segment], t[min_dist_segment], min_dist_segment

# @njit(fastmath=False, cache=True)
def first_point_on_trajectory_intersecting_circle(point_tup, radius, trajectory, t=0.0, wrap=False):
    """
    starts at beginning of trajectory, and find the first point one radius away from the given point along the trajectory.

    Assumes that the first segment passes within a single radius of the point

    http://codereview.stackexchange.com/questions/86421/line-segment-to-circle-collision-algorithm
    """
    point = np.array(point_tup)
    start_i = int(t)
    start_t = t % 1.0
    first_t = None
    first_i = None
    first_p = None
    trajectory = np.ascontiguousarray(trajectory)
    for i in range(start_i, trajectory.shape[0]-1):
        start = trajectory[i,:]
        end = trajectory[i+1,:]+1e-6
        V = np.ascontiguousarray(end - start)

        a = np.dot(V,V)
        b = 2.0*np.dot(V, start - point)
        c = np.dot(start, start) + np.dot(point,point) - 2.0*np.dot(start, point) - radius*radius
        discriminant = b*b-4*a*c

        if discriminant < 0:
            continue
        #   print "NO INTERSECTION"
        # else:
        # if discriminant >= 0.0:
        discriminant = np.sqrt(discriminant)
        t1 = (-b - discriminant) / (2.0*a)
        t2 = (-b + discriminant) / (2.0*a)
        if i == start_i:
            if t1 >= 0.0 and t1 <= 1.0 and t1 >= start_t:
                first_t = t1
                first_i = i
                first_p = start + t1 * V
                break
            if t2 >= 0.0 and t2 <= 1.0 and t2 >= start_t:
                first_t = t2
                first_i = i
                first_p = start + t2 * V
                break
        elif t1 >= 0.0 and t1 <= 1.0:
            first_t = t1
            first_i = i
            first_p = start + t1 * V
            break
        elif t2 >= 0.0 and t2 <= 1.0:
            first_t = t2
            first_i = i
            first_p = start + t2 * V
            break
    # wrap around to the beginning of the trajectory if no intersection is found1
    if wrap and first_p is None:
        for i in range(-1, start_i):
            start = trajectory[i % trajectory.shape[0],:]
            end = trajectory[(i+1) % trajectory.shape[0],:]+1e-6
            V = end - start

            a = np.dot(V,V)
            b = 2.0*np.dot(V, start - point)
            c = np.dot(start, start) + np.dot(point,point) - 2.0*np.dot(start, point) - radius*radius
            discriminant = b*b-4*a*c

            if discriminant < 0:
                continue
            discriminant = np.sqrt(discriminant)
            t1 = (-b - discriminant) / (2.0*a)
            t2 = (-b + discriminant) / (2.0*a)
            if t1 >= 0.0 and t1 <= 1.0:
                first_t = t1
                first_i = i
                first_p = start + t1 * V
                break
            elif t2 >= 0.0 and t2 <= 1.0:
                first_t = t2
                first_i = i
                first_p = start + t2 * V
                break

    return first_p, first_i, first_t

# @njit(fastmath=False, cache=True)
def get_velocity_command(pose_theta, lookahead_point, position_tup, lookahead_distance) -> Tuple[LinearVelocity, AngularVelocity]:
    """
    Returns actuation
    """
    position = np.array(position_tup)
    waypoint_y = np.dot(np.array([np.sin(-pose_theta), np.cos(-pose_theta)]), lookahead_point[0:2]-position)
    linear_velocity = lookahead_point[2]
    if np.abs(waypoint_y) < 1e-6:
        return linear_velocity, 0.
    radius = 1/(2.0*waypoint_y/lookahead_distance**2)
    angular_velocity = linear_velocity/radius
    return linear_velocity, angular_velocity
