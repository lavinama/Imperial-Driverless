import itertools

import rclpy
import rclpy.node

import imperial_driverless_interfaces.msg as idi
import fs_msgs.msg


class FSTrackToConemap(rclpy.node.Node):
    def __init__(self):
        super().__init__('fs_track_to_conemap')
        
        fs_track_topic = '/testing_only/track'
        cone_map_topic = '/ground_truth/cone_map'

        self._fs_track_sub = self.create_subscription(fs_msgs.msg.Track, fs_track_topic, self._fs_track_callback, 10)
        self._cone_map_pub = self.create_publisher(idi.ConeMap, cone_map_topic, 10)

        self._cone_map_msg: idi.ConeMap = idi.ConeMap()

    def _fs_track_callback(self, msg: fs_msgs.msg.Track):
        def fs_cone_to_idi_cone(fs_cone: fs_msgs.msg.Cone) -> idi.Cone:
            return idi.Cone(position=fs_cone.location)
        
        def color(c: fs_msgs.msg.Cone) -> int: return c.color
        cone_groups = {k: list(map(fs_cone_to_idi_cone, v)) for k, v in itertools.groupby(sorted(list(msg.track), key=color), key=color)}

        self._cone_map_msg.header.frame_id = 'gt_map'
        self._cone_map_msg.header.stamp = self.get_clock().now().to_msg()

        self._cone_map_msg.left_cones         = cone_groups.get(fs_msgs.msg.Cone.BLUE, [])
        self._cone_map_msg.right_cones        = cone_groups.get(fs_msgs.msg.Cone.YELLOW, [])
        self._cone_map_msg.big_orange_cones   = cone_groups.get(fs_msgs.msg.Cone.ORANGE_BIG, [])
        self._cone_map_msg.small_orange_cones = cone_groups.get(fs_msgs.msg.Cone.ORANGE_SMALL, [])

        self._pub_timer = self.create_timer(0.1, lambda: self._cone_map_pub.publish(self._cone_map_msg))

def main():
    rclpy.init()
    node = FSTrackToConemap()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()
