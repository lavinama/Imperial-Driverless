import rclpy
import rclpy.node

import imperial_driverless_interfaces.msg as idi
import fs_msgs.msg


class FSTrackToConemap(rclpy.node.Node):
    def __init__(self):
        super().__init__('control_command_converter')
        
        vcu_drive_cmd_topic = '/vcu_drive_cmd'
        fs_control_command_topic = '/control_command'

        self._vcu_drive_cmd_sub = self.create_subscription(idi.VCUDriveCommand, vcu_drive_cmd_topic, self._vcu_drive_cmd_callback, 1)
        self._fs_control_command_pub = self.create_publisher(fs_msgs.msg.ControlCommand, fs_control_command_topic, 1)

    def _vcu_drive_cmd_callback(self, msg: idi.VCUDriveCommand):
        m = fs_msgs.msg.ControlCommand()
        m.header.stamp = self.get_clock().now().to_msg()
        m.throttle = ((msg.rear_axle_trq_request + msg.front_axle_trq_request) / 2) / 195.0
        m.brake = ((msg.hyd_press_f_req_pct + msg.hyd_press_r_req_pct) / 2) / 100.0
        m.steering = (msg.steer_request_deg / -21.0)
        self._fs_control_command_pub.publish(m)

def main():
    rclpy.init()
    node = FSTrackToConemap()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()
